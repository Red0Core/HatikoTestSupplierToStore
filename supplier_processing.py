import csv
from locale import normalize
from os import name
from pathlib import Path
import re

from csv_processing import find_delimiter
from store_processing import BRAND_SYNONYMS, generate_keywords

class SupplierProduct:
    def __init__(self, name: str, brand: str, model: str, supplier_name: str, synonyms: set[str],
                 price: int, ram: int | None = None, storage: int | None = None, color: str | None = None):
        self.model = model
        self.supplier_name = supplier_name
        self.price = price
        self.ram = ram
        self.storage = storage
        self.color = color
        self.name = name
        self.synonyms = synonyms
        self.brand = brand
    
    def __repr__(self):
        return f"SupplierProduct(name='{self.name}', model='{self.model}', brand='{self.brand}', supplier_name='{self.supplier_name}', " \
               f"price={self.price}, ram={self.ram}, storage={self.storage}, color={self.color}, synonyms={self.synonyms})"
    
    def __dict__(self) -> dict:
        return {
            "model": self.model,
            "supplier_name": self.supplier_name,
            "price": self.price,
            "ram": self.ram,
            "storage": self.storage,
            "color": self.color,
            "synonyms": list(self.synonyms),
            "name": self.name,
            "brand": self.brand
        }


def extract_brand_or_model(text):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±—Ä–µ–Ω–¥ –∏–ª–∏ –º–æ–¥–µ–ª—å –∏–∑ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Ü–µ–Ω—ã –∏ –∏–º–µ–µ—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –≤ –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö.
    """
    pattern = re.compile(r"^(?!.*[–∞-—è–ê-–Ø]+)(?!.*\d+\s?[‚ÇΩ$‚Ç¨])[\W]+\s*([\w\d\s]+?)\s*[\W]+$")
    match = pattern.match(text)

    if match:
        return match.group(1).strip().lower()
    return None

def normalize_model(model):
    """–£–¥–∞–ª—è–µ—Ç –Ω–µ ASCII —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É."""
    model = re.sub(r"[^\w\s\-/]", "", model)  # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    return model.strip()

def extract_price(text: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏"""
    match = re.search(r"(\d{4,6})\s?[‚ÇΩ$‚Ç¨]?", text)  # –ò—â–µ–º —á–∏—Å–ª–æ 4-6 —Ü–∏—Ñ—Ä –≤ –∫–æ–Ω—Ü–µ
    if match:
        price = int(match.group(1))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        model = text[: match.start()].strip()  # –£–±–∏—Ä–∞–µ–º —Ü–µ–Ω—É –∏–∑ –º–æ–¥–µ–ª–∏
        return model, price
    return text, None

def extract_memory(text: str):
    """–£–±–∏—Ä–∞–µ—Ç –æ–±—ä–µ–º RAM –∏ Storage –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if "tb" in text.lower(): # –ú–µ–Ω—è–µ–º —Ç–µ—Ä–∞–±–∞–π—Ç—ã –Ω–∞ –≥–∏–≥–∞–±–∞–π—Ç—ã
        text.replace("tb", "024GB").replace("TB", "024GB")
    match = re.search(r"(\d{1,2})\s?[/\\+\- ]\s?(\d{2,4})[GBgb]*", text)  # –ò—â–µ–º "8/256gb", "8+256GB"
    if match:
        ram = int(match.group(1))
        storage = int(match.group(2))
        replacer_str = f"{ram}/{str(storage) + "GB" if storage < 1000 else '1TB'}" # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ "8/256GB" –∏–ª–∏ "8/1TB"
        model = text.replace(match.group(0), replacer_str).strip()
        return model, replacer_str, ram, storage
    return text, "", None, None

def map_supplier_color_to_store(supplier_color: str, store_color_synonyms: dict[str, set[str]]) -> str | None:
    """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–≤–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º –º–∞–≥–∞–∑–∏–Ω–∞."""""
    supplier_color = supplier_color.lower()
    for russian_color, synonyms in store_color_synonyms.items():
        if supplier_color in synonyms:
            return russian_color
    return None

def extract_color(text: str, store_color_synonyms: dict[str, set[str]]) -> tuple[str, str | None]:
    """–ò—â–µ—Ç —Ü–≤–µ—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –µ–≥–æ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –º–∞–≥–∞–∑–∏–Ω–∞."""
    for russian_color, synonyms in store_color_synonyms.items():
        # –í –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ black –∏ black stormy –º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ
        sorted_synonyms = sorted(synonyms, key=len, reverse=True)
        for color in sorted_synonyms:
            if color in text.lower():
                return text.lower().replace(color, "").strip(), russian_color
    return text, None

def normalize_brand(brand: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –±—Ä–µ–Ω–¥ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –Ω–∞–ø–∏—Å–∞–Ω–∏—é –∏–∑ BRAND_SYNONYMS."""
    for key_brand, variations in BRAND_SYNONYMS.items():
        if brand in variations:
            return key_brand
    return brand

def detect_brand_from_model(model: str) -> str | None:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±—Ä–µ–Ω–¥ –∏–∑ –º–æ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—è BRAND_SYNONYMS."""
    for brand in BRAND_SYNONYMS:
        if brand in model:
            return brand
    return None  # –ï—Å–ª–∏ –±—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω

def load_and_process_supplier_data(file_path, store_color_synonyms):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç, –æ—á–∏—â–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –±—Ä–µ–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üì±SAMSUNGüì±").
    - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–æ–¥–µ–ª—å, —Ü–µ–Ω—É, RAM, Storage, —Ü–≤–µ—Ç.
    - –ü—Ä–∏–≤–æ–¥–∏—Ç —Ü–≤–µ—Ç –∫ —Ñ–æ—Ä–º–∞—Ç—É –º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å `store_color_synonyms`.
    """
    delimeter = find_delimiter(file_path)
    supplier_data: list[SupplierProduct] = []
    current_brand = None
    with open(file_path, encoding="utf-8") as f:
        reader = csv.reader(f, delimiter=delimeter)
        for row in reader:
            if len(row) < 2:
                continue

            product_name = row[0].strip().lower().replace("pro + ", "pro+ ").replace("pro+ ", "pro plus ").replace('-','')
            supplier_name = row[1].strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –±—Ä–µ–Ω–¥–∞
            match = extract_brand_or_model(product_name)
            if match:
                current_brand = normalize_brand(match)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –±—Ä–µ–Ω–¥
                continue
            
            detected_brand = detect_brand_from_model(product_name)

            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫–æ–π-—Ç–æ –±—Ä–µ–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ `current_brand`
            if detected_brand:
                current_brand = detected_brand

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            model, price = extract_price(product_name)

            if price is None or '[' in model:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º—É—Å–æ—Ä

            # –ò–∑–≤–ª–µ–∫–∞–µ–º RAM –∏ Storage –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            model, replace_ram_storage, ram, storage = extract_memory(model)
            product_name = model # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∫ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É
            model = model.replace(replace_ram_storage, "")  # –£–±–∏—Ä–∞–µ–º RAM –∏ Storage –∏–∑ –º–æ–¥–µ–ª–∏
            # –û—Ç–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
            model, supplier_color = extract_color(model, store_color_synonyms)

            # –û—á–∏—â–∞–µ–º –º–æ–¥–µ–ª—å –∏ –∏–º—è
            model = normalize_model(model)
            product_name = normalize_model(product_name)

            # –ï—Å–ª–∏ –±—Ä–µ–Ω–¥ –Ω–∞–π–¥–µ–Ω —Ä–∞–Ω–µ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –≤ –∏–º–µ–Ω–∏ –Ω–µ—Ç –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –±—Ä–µ–Ω–¥–∞
            if current_brand:
                for orig_brand, variations in BRAND_SYNONYMS.items():
                    if current_brand in variations:
                        current_brand = orig_brand
                        break

                if current_brand not in model:
                    model = f"{current_brand} {model}"
                if current_brand not in product_name:
                    product_name = f"{current_brand} {product_name}"

            if current_brand == "xiaomi" and "note" in model and "redmi" not in model:
                model = model.replace("xiaomi", "xiaomi redmi")  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º Redmi, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å xiaomi note..
                product_name = product_name.replace("xiaomi", "xiaomi redmi")

            product_name = ' '.join(product_name.split()) # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            model = ' '.join(model.split()) # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            keywords = generate_keywords(product_name, store_color_synonyms, ram, storage, supplier_color)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
            supplier_data.append(SupplierProduct(product_name, current_brand, model,
                                                 supplier_name, keywords, price, ram, storage, supplier_color))

    return supplier_data
