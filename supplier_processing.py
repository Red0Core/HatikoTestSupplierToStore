import csv
from pathlib import Path
import re

from csv_processing import find_delimiter
from store_processing import BRAND_SYNONYMS, generate_keywords

class SupplierProduct:
    def __init__(self, model: str, supplier_name: str, synonyms: set[str],
                 price: int, ram: int | None = None, storage: int | None = None, color: str | None = None):
        self.model = model
        self.supplier_name = supplier_name
        self.price = price
        self.ram = ram
        self.storage = storage
        self.synonyms = synonyms
    
    def __repr__(self):
        return f"SupplierProduct(model='{self.model}', supplier_name='{self.supplier_name}', " \
               f"price={self.price}, ram={self.ram}, storage={self.storage}, keywords={self.synonyms})"

def extract_brand_or_model(text):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±—Ä–µ–Ω–¥ –∏–ª–∏ –º–æ–¥–µ–ª—å –∏–∑ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Ü–µ–Ω—ã –∏ –∏–º–µ–µ—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –≤ –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö.
    """
    pattern = re.compile(r"^(?!.*[–∞-—è–ê-–Ø]+)(?!.*\d+\s?[‚ÇΩ$‚Ç¨])[\W]+\s*([\w\d\s]+?)\s*[\W]+$")
    match = pattern.match(text)

    if match:
        return match.group(1).strip().lower()
    return None

def normolize_model(model):
    """–£–±–∏—Ä–∞–µ—Ç –≤—Å–µ –Ω–µ ASCII —Å–∏–º–≤–æ–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    return ''.join([i if ord(i) < 128 else '' for i in model]).strip(" -")

def extract_price(text: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏"""
    match = re.search(r"(\d{4,6})\s?[‚ÇΩ$‚Ç¨]?", text)  # –ò—â–µ–º —á–∏—Å–ª–æ 4-6 —Ü–∏—Ñ—Ä –≤ –∫–æ–Ω—Ü–µ
    if match:
        price = int(match.group(1))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        model = text[: match.start()].strip()  # –£–±–∏—Ä–∞–µ–º —Ü–µ–Ω—É –∏–∑ –º–æ–¥–µ–ª–∏
        return model, price
    return text, None

def extract_memory(text: str):
    """–£–±–∏—Ä–∞–µ—Ç –æ–±—ä–µ–º RAM –∏ Storage –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if "tb" in text.lower(): # –ú–µ–Ω—è–µ–º —Ç–µ—Ä–∞–±–∞–π—Ç—ã –Ω–∞ –≥–∏–≥–∞–±–∞–π—Ç—ã
        text.replace("tb", "024GB").replace("TB", "024GB")
    match = re.search(r"(\d{1,2})\s?[/\\+\-]\s?(\d{2,4})", text)  # –ò—â–µ–º "8/256", "8+256"
    if match:
        ram = int(match.group(1))
        storage = int(match.group(2))
        replacer_str = f"{ram}/{str(storage) + 'GB' if storage < 1000 else '1TB'}" # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ "8/256GB" –∏–ª–∏ "8/1TB"
        model = text.replace(match.group(0), replacer_str).strip()
        return model, ram, storage
    return text, None, None

def extract_from_color_synonyms_all_english_colors(store_color_synonyms: dict[str, set[str]]) -> set[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –º–∞–≥–∞–∑–∏–Ω–∞"""
    english_synonyms = set()
    for synonyms in store_color_synonyms.values():
        for color in synonyms:
            if all(ord('a') <= ord(ch) <= ord('z') for ch in color.lower()):
                english_synonyms.add(color)
    return english_synonyms

def map_supplier_color_to_store(supplier_color: str, store_color_synonyms: dict[str, set[str]]) -> str | None:
    """
    –ò—â–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ü–≤–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Ä—É—Å—Å–∫–∏–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç.
    –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    supplier_color = supplier_color.lower()

    for russian_color, synonyms in store_color_synonyms.items():
        if supplier_color in synonyms:
            return russian_color  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä—É—Å—Å–∫–∏–π —Ü–≤–µ—Ç –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞

    return None  # –ï—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω

def load_and_process_supplier_data(file_path, store_color_synonyms):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç, –æ—á–∏—â–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –±—Ä–µ–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üì±SAMSUNGüì±").
    - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–æ–¥–µ–ª—å, —Ü–µ–Ω—É, RAM, Storage, —Ü–≤–µ—Ç.
    - –ü—Ä–∏–≤–æ–¥–∏—Ç —Ü–≤–µ—Ç –∫ —Ñ–æ—Ä–º–∞—Ç—É –º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å `store_color_synonyms`.
    """
    delimeter = find_delimiter(file_path)
    supplier_data: list[SupplierProduct] = []
    current_brand = None
    all_english_colors = extract_from_color_synonyms_all_english_colors(store_color_synonyms)
    with open(file_path, encoding="utf-8") as f:
        reader = csv.reader(f, delimiter=delimeter)
        for row in reader:
            if len(row) < 2:
                continue

            product_name = row[0].strip().lower()
            supplier_name = row[1].strip().lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –±—Ä–µ–Ω–¥–∞
            match = extract_brand_or_model(product_name)
            if match:
                current_brand = match  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –±—Ä–µ–Ω–¥
                continue

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            model, price = extract_price(product_name)

            if price is None:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º—É—Å–æ—Ä

            # –ò–∑–≤–ª–µ–∫–∞–µ–º RAM –∏ Storage
            model, ram, storage = extract_memory(model)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
            supplier_color = None
            for color in all_english_colors:
                if color in model.lower():
                    supplier_color = color
                    break

            # –ü—Ä–∏–≤–æ–¥–∏–º —Ü–≤–µ—Ç –∫ —Ä—É—Å—Å–∫–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
            store_color = map_supplier_color_to_store(supplier_color, store_color_synonyms) if supplier_color else None

            # –û—á–∏—â–∞–µ–º –º–æ–¥–µ–ª—å
            model = normolize_model(model)

            # –ï—Å–ª–∏ –±—Ä–µ–Ω–¥ –Ω–∞–π–¥–µ–Ω —Ä–∞–Ω–µ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –º–æ–¥–µ–ª–∏
            if current_brand and not any(brand in model for brand in BRAND_SYNONYMS):
                model = f"{current_brand} {model}"

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            keywords = generate_keywords(model, store_color_synonyms, ram, storage, store_color)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
            supplier_data.append(SupplierProduct(model, supplier_name, keywords, price, ram, storage, store_color))

    return supplier_data
